interval=4
ncams=3

switchdur=350
codecargs="-codec mpeg4"
codecargs="-codec h264 -preset fast" # " -b:v 100k"
codecargs="-codec h264 -preset ultrafast" # " -b:v 100k"
seglen=600

muxerargs="-f segment -segment_time ${seglen:?} -strftime 1"
muxerargs=

fontfile="/usr/share/fonts/TTF/DejaVuSans.ttf"

stampbox="drawtext=fontfile=${fontfile:?}: boxcolor=0x000000AA:box=1:fontsize=24:fontcolor='white':text='%{localtime\:%T}.%{eif\:mod(time(0)*1000,1000)\:d\:3}'"

shopt -s nullglob

fm_mycycle_start() {
    $THISDIR/mycycle >/dev/null &
    fm_mycycle_pid=$!
}

fm_mycycle_stop() {
    if [ -n "${ffmpeg_pid}" ]; then
        kill -TERM ${fm_mycycle_pid:?} 2>/dev/null || true
        fm_mycycle_pid=
    fi
}

fm_killffmpeg() {
    if [ -n "${ffmpeg_pid}" ]; then
        kill -TERM "${ffmpeg_pid:?}" 2>/dev/null || true
        ffmpeg_pid=
    fi
}

fm_killwdog() {
    if [ -n "${ffmpeg_watchdog_pid}" ]; then
        kill -TERM "${ffmpeg_watchdog_pid:?}" 2>/dev/null || true
        ffmpeg_watchdog_pid=
    fi
}

fm_record_in_empty_dirs() {
    local station i subdir have
    ffmpeg_pid=
    fm_mycycle_pid=
    ffmpeg_watchdog_pid=

    station=${1:?}
    shift

    subdir="$station"
    mkdir -p "${subdir:?}/`date +%Y%m%d`" "${subdir:?}/`date --date=tomorrow +%Y%m%d`"

    if [ "x$1" = x"fm_rec_cam" ]; then
        fm_mycycle_start
    fi
    trap 'fm_mycycle_stop; fm_killffmpeg; fm_killwdog;' EXIT

    while true; do
        echo "writing to $subdir"
        mkdir -p $subdir

        pwd
        "$@"
        
        #break
        sleep 10
    done
}

fm_ffmpeg_watchdog() {
    local ffmpeg_pid=${1:?}
    local watchdir=${2:?}
    local newstate prevstate=

    cd "$watchdir"
    while true; do
        mkdir -p "`date --date=tomorrow +%Y%m%d`"
        newstate=`du -ksx .`
        #newstate="y"
        if [ x"$prevstate" = x"$newstate" ]; then
            echo
            echo "ffmpeg seems hung"
            echo
            fm_killffmpeg
            break
        fi
        prevstate=$newstate
        sleep 120
    done
}

fm_ffmpeg() {
    rc=1
    echo ffmpeg "$@"
    ffmpeg "$@" &
    ffmpeg_pid=$!
    fm_ffmpeg_watchdog "$ffmpeg_pid" "$subdir" &
    ffmpeg_watchdog_pid=$!

    echo
    echo "ffmpeg_pid: $ffmpeg_pid , ffmpeg_watchdog_pid: $ffmpeg_watchdog_pid , BASHPID: $BASHPID"
    echo

    rc=0
    wait $ffmpeg_pid || rc=$?
    fm_killwdog
}

fm_rec_cam() {
    local i filterstr= outmap=()

    local ncams2=$ncams
    #ncams2=1

    # ,${stampbox:?}
    for ((i=0; i<ncams2; i++)); do
        filterstr="${filterstr}${filterstr:+;}
        [0:v]fps=12,select='gte(st(0,mod(time(0)*1000,${ncams:?}*${interval:?}*1000)),$i*${interval:?}*1000+${switchdur:?})*lt(ld(0),($i+1)*${interval:?}*1000-1)',select='gt(scene,0.005)',${stampbox:?}[out$i]
        "
        outmap+=(
            -map "[out$i]" $codecargs $muxerargs "${subdir:?}/%Y%m%d/split$i-%H-%M-%S.mkv")
    done

#        [0:v]fps=12,select='gte(st(0,mod(time(0)*1000,${ncams:?}*${interval:?}*1000)),$i*${interval:?}*1000+${switchdur:?})*lt(ld(0),($i+1)*${interval:?}*1000-1)',split=2[out$i][forscene-out$i];
#        [forscene-out$i]select='gt(scene,0.005)'[afterscene-out$i]
#            -map "[afterscene-out$i]" $codecargs $muxerargs "${subdir:?}/%Y%m%d/split$i-scene.mkv"

# ,fps=25,fifo
    fm_ffmpeg -loglevel warning -y -f video4linux2 -standard PAL -t 40 -i /dev/video0 -filter_complex "$filterstr" "${outmap[@]}"
}

fm_all() {
    [ $# = 0 ] && set -- cam
    for st in "$@"; do
        fm_record_in_empty_dirs $st fm_rec_$st
    done
}

fm_resetup() {
    set -e
    set -o pipefail
    function errtrap {     es=$?;     echo "ERROR line $1: Command exited with status $es.">&2; }; trap 'errtrap $LINENO' ERR
    
    THISDIR=`cd "\`dirname \"${BASH_SOURCE[0]}\"\`" && pwd`
}
